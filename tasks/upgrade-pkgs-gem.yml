---

- name: Include gcc
  ansible.builtin.include_tasks: gcc.yml
  when: ansible_system == 'Linux'

- name: Ensure gem without documentation - can fill inodes
  ansible.builtin.lineinfile:
    dest: /root/.gemrc
    line: "{{ item }}"
    create: yes
    mode: '0600'
  with_items:
    - 'install: --no-rdoc --no-ri'
    - 'update: --no-rdoc --no-ri'

## possible dependencies: libsqlite3-dev
- name: Check which gem
  ansible.builtin.command: which gem
  changed_when: false
  ignore_errors: true
  register: gem1
  tags: gem
- name: Linux | ensure ruby-dev is installed
  ansible.builtin.package:
    name: ruby-dev
    state: present
  when: gem1 is defined and gem1.stdout is defined and gem1.stdout.find("/usr") != -1 and ansible_system == "Linux"
  tags: gem
  register: pkg_result
  until: pkg_result is success
- name: Get installed gem
  # ansible.builtin.shell: "gem list --local --no-versions |egrep -v '(LOCAL GEMS|^$)'"
  ansible.builtin.shell: "gem outdated --local | awk '!/{{ upgradepkgsgem_gem_exclude }}/ { print $1 }'"
  register: gemlist
  changed_when: false
  ignore_errors: true
  when: gem1 is defined and gem1.stdout is defined and gem1.stdout.find("/usr") != -1
  tags: gem
- name: Debug | gem list
  ansible.builtin.debug:
    var: gemlist

- name: System gem
  when: >
    gem1 is defined and gem1.stdout is defined and gem1.stdout.find("/usr") != -1 and
    gemlist.stdout is defined and gemlist.stdout and
    gemlist.stdout_lines is defined and gemlist.stdout_lines != []
  tags: gem
  block:
    - name: Update system gem
      ansible.builtin.gem:  # noqa package-latest
        name: "{{ item }}"
        state: latest
        user_install: no
      with_items: "{{ gemlist.stdout_lines }}"
      register: pkg_result
      until: pkg_result is success
    - name: Set gem_updated var
      ansible.builtin.set_fact:
        gem_updated: true

- name: Debug | gem user
  ansible.builtin.debug:
    var: gem_user
- name: Debug | upgradepkgsgem_gem_user
  ansible.builtin.debug:
    var: upgradepkgsgem_gem_user
- name: User gem
  when: >
    gem_user is defined and
    upgradepkgsgem_gem_user[inventory_hostname] is defined and
    upgradepkgsgem_gem_user[inventory_hostname]
  tags: gem
  block:
    - name: Get outdated user gem
      # shell: "gem list --local --no-versions |egrep -v '(LOCAL GEMS|^$)'"
      ansible.builtin.shell: "gem outdated --local | awk '!/{{ upgradepkgsgem_gem_exclude }}/ { print $1 }'"
      register: gemlistuser
      changed_when: false
      ignore_errors: true
      become: yes
      become_user: "{{ upgradepkgsgem_gem_user[inventory_hostname] }}"
    - name: Update user gem
      ansible.builtin.gem:  # noqa package-latest
        name: "{{ item }}"
        state: latest
      become: yes
      become_user: "{{ upgradepkgsgem_gem_user[inventory_hostname] }}"
      with_items: "{{ gemlistuser.stdout_lines }}"
      register: pkg_result
      until: pkg_result is success
    - name: Set gem_updated var
      ansible.builtin.set_fact:
        gem_updated: true

## gem cleanup <pkg>
## gem uninstall -i /usr/share/rubygems-integration/all thor
